package com.example.messenger.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import java.time.LocalDateTime;
import java.util.Date;

@Entity //This annotation specifies that the class is an entity. An entity represents a table stored in a database. Every instance of an entity represents a row in the table.
@Table(name = "user")
@Getter
@Setter // This will generate both getters and setters for all fields
public class UserModel {
    @Id //This annotation marks the field id as the primary key of the entity.
    @GeneratedValue(strategy = GenerationType.IDENTITY) //This specifies that the primary key should be generated automatically by the database &  indicates that the database should automatically increment the primary key value for new records.
    @Column
    private Long id;

    @Column(length = 50, unique = true, nullable = false)
    private String username;

    @Column(length = 60, nullable = false)
    private String password; // hashed with BCryptPasswordEncoder

    @Column(length = 255, unique = true, nullable = false)
    private String email;

    @Column(name = "created_on", nullable = false, updatable = false, insertable = false, columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    private LocalDateTime createdOn;

    @Column(name = "last_login")
    private LocalDateTime lastLogin;

    @Column(nullable = false)
    private Date dob;

    // Required by JPA, this constructor does not get automatically generated by Lombok, so you need to explicitly define it. With Lombok, you can also use @NoArgsConstructor to generate a default constructor and @AllArgsConstructor for a constructor with all arguments if needed.
    public UserModel(){
    }

    // Example setter. Lombok's annotation does this already for us so we dont need this.
    public void setUsername(String username) {
        this.username = username;
    }

    // Custom setter for password to encode it
    public void setPassword(String password) {
        this.password = new BCryptPasswordEncoder().encode(password); //BCryptPasswordEncoder class from Spring Security is used to hash the password. The encode method hashes the given plain text password.
    }
}
